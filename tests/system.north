; syscall (read)
; count *buf fd 0 syscall
; the ´syscall´ token consumes 4 args from the stack and the return code (number of bytes read for syscall 0) is pushed back to the stack

; remember read() doesn't add '\0' to terminate to make it string (just gives raw buffer).

; syscall (write)
; count *buf fd 1 syscall
; the ´syscall´ token consumes 4 args from the stack and the return code (number of bytes written for syscall 1) is pushed back to the stack


; syscall (exit_group)
; exitcode exit
; exits the program with ´exitcode´ using ´syscall´ 231

; reading a byte from stdin
1 mem 1 0 syscall drop

; writing it to stdout
mem 72 store8
1 mem 1 1 syscall

; or more simply:
"Hello World!\n" 1 1 syscall drop

; exit with exit code 0
0 exit
