; linux system calls
;
; linux system calls are of the general form:
; arg5 arg4 arg3 arg2 arg1 arg0 syscall_number syscall
; these correspond to the arguments in arg0 (%rdi) arg1 (%rsi) arg2 (%rdx) arg3 (%r10) arg4 (%r8) arg5 (%r9)
; not all arguments are required for each syscall
; 
; fd, stdin = 0,  stdout = 1,  stderr = 2
;
; syscall 0 (read)
; count *buf fd 0 syscall
; the ´syscall´ token consumes 4 args from the stack and the return code (number of bytes read for syscall 0) is pushed back to the stack
; remember read() doesn't add '\0' to terminate to make it string (just gives raw buffer).

; syscall 1 (write)
; count *buf fd 1 syscall
; the ´syscall´ token consumes 4 args from the stack and the return code (number of bytes written for syscall 1) is pushed back to the stack

; syscall 2 (open)
; mode flags *filename 2 syscall
; the ´syscall´ token consumes 4 args from the stack and the return (fd for file) is pushed back to the stack
; fd, stdin = 0,  stdout = 1,  stderr = 2
; mode: O_RDONLY 0
;       O_WRONLY 1
;       O_RDWR   2
;
; flags: In addition, zero or more file creation flags and file status
;        flags can be bitwise-or'd in flags
;
; *filename:
;    const char *pathname 
;    "foo.north" swap drop           ; stack> &str_ptr
;    "foo/bar.north" swap drop
;    "/foo/bar/baz.north" swap drop

; syscall 3 (close)
; fd 3 syscall
; the ´syscall´ token consumes 2 args from the stack and the return (0 for success, -1 for error) is pushed back to the stack

; syscall 5 (fstat)
; *buff fd 5 syscall
; the ´syscall´ token consumes 3 args from the stack and the return (0 for success, -1 for error) is pushed back to the stack
; additonally the stat structure is loaded into *buff
    ; stat(pathname, &sb);
        ;    if ((sb.st_mode & S_IFMT) == S_IFREG) {
        ;        /* Handle regular file */
        ;    }

        ;    S_IFMT     0170000   bit mask for the file type bit field

        ;    S_IFSOCK   0140000   socket
        ;    S_IFLNK    0120000   symbolic link
        ;    S_IFREG    0100000   regular file
        ;    S_IFBLK    0060000   block device
        ;    S_IFDIR    0040000   directory
        ;    S_IFCHR    0020000   character device
        ;    S_IFIFO    0010000   FIFO

        ;    struct stat {
        ;        dev_t     st_dev;         /* ID of device containing file */
        ;        ino_t     st_ino;         /* Inode number */
        ;        mode_t    st_mode;        /* File type and mode */
        ;        nlink_t   st_nlink;       /* Number of hard links */
        ;        uid_t     st_uid;         /* User ID of owner */
        ;        gid_t     st_gid;         /* Group ID of owner */
        ;        dev_t     st_rdev;        /* Device ID (if special file) */
        ;        off_t     st_size;        /* Total size, in bytes */
        ;        blksize_t st_blksize;     /* Block size for filesystem I/O */
        ;        blkcnt_t  st_blocks;      /* Number of 512B blocks allocated */

        ;        /* Since Linux 2.6, the kernel supports nanosecond
        ;           precision for the following timestamp fields.
        ;           For the details before Linux 2.6, see NOTES. */

        ;        struct timespec st_atim;  /* Time of last access */
        ;        struct timespec st_mtim;  /* Time of last modification */
        ;        struct timespec st_ctim;  /* Time of last status change */

        ;    #define st_atime st_atim.tv_sec      /* Backward compatibility */
        ;    #define st_mtime st_mtim.tv_sec
        ;    #define st_ctime st_ctim.tv_sec
        ;    };

; syscall 231 (exit_group)
; exitcode 231 syscall
; the ´syscall´ token consumes 2 args from the stack, exits the program with ´exitcode´, does not return

; reading a byte from stdin
1 mem 0 0 syscall3 drop

; writing it to stdout
1 mem 1 1 syscall3 drop

; or more simply:
"Hello World!\n" 1 1 syscall3 drop


0 0 "./examples" swap drop 2 syscall3  ;> fd
 dup 18446744073709551614 == if 
    "No such file or directory\n" 2 1 syscall3 drop
    1 exit
endif
mem over 5 syscall2 drop ;> fd (mem should have the stat struct in it)
3 syscall1 drop                     ; stack>      ; close the fd
mem 25 + load8 240 &  ; 128 if a file and 64 if a directory
dup 128 == if
    " is a file\n" 1 1 syscall3 drop
endif
dup 64 == if
    " is a directory\n" 1 1 syscall3 drop
endif
dup 32 == if
    " is a character device\n" 1 1 syscall3 drop
endif

; exit with exit code 42
42 231 syscall1

; or more simply:
;42 exit
