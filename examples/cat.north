; using syscall 2 (open) and syscall 0 (read) to read a file to mem
; syscall 1 (write) to write it to stdout
; and syscall 3 (close) to close it.
;
; fd, 0 = stdin, 1 = stdout, 2 = stderr
; syscall 2 (open)
; mode flags *filename 2 syscall
; the ´syscall´ token consumes 4 args from the stack and the return (fd for file) is pushed back to the stack

;mode: O_RDONLY 0
;      O_WRONLY 1
;      O_RDWR   2

; flags In addition, zero or more file creation flags and file status
;       flags can be bitwise-or'd in flags

; *filename
; const char *pathname 
; "foo.north" swap drop           ; stack> &str_ptr
; "foo/bar.north" swap drop
; "/foo/bar/baz.north" swap drop

; syscall 0 (read)
; count *buf fd 0 syscall
; the ´syscall´ token consumes 4 args from the stack and the return code (number of bytes read for syscall 0) is pushed back to the stack
; remember read() doesn't add '\0' to terminate to make it string (just gives raw buffer).

; syscall 3 (close)
; fd 3 syscall
; the ´syscall´ token consumes 2 args from the stack and the return (0 for success, -1 for error) is pushed back to the stack

; expects stack> &argv[N] ... &argv[1] &argv[0] argc
dup 2 != if                        ; check if argc is != 2 (just one arg)
    ;TODO: unhardcode binary name
    "usage: ./cat file\n" 1 1 syscall3 drop
    1 exit
else
    2drop                           ; stack> &argv[1]    ; drop argc and &argv[0]
0 swap                              ; stack> offset1 &argv[1]  
    while dup load8 dup 0 != do     ; stack > offset1 &argv[1] argv[1]
        rot swap over 
        mem + swap store8
        1 + swap 
        1 + 
    done drop drop
endif                               ; stack> offset1     ; mem[0] to mem[offset1]   contains argv[1]
drop                                ; stack>             ; drop offset
; stack > 
0 0 0 mem                           ; stack> offset2 mode flags *filename
2 syscall3                          ; stack> offset2 fd
1                                   ; stack> offset2 fd bytes_read 
while 0 != do                       ; stack> offset2 fd 
    2dup swap mem + 0 1 rot 2swap syscall3     ; syscall read
    rot 1 + rot rot
done
3 syscall1 drop                     ;stack> offset2
mem 1 1 syscall3 drop

